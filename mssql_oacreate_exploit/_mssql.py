# encoding: utf-8
# module _mssql
# from c:\users\c1y2m3\appdata\roaming\python\python27\site-packages\_mssql.pyd
# by generator 1.146
""" This is an effort to convert the pymssql low-level C module to Cython. """

# imports
import datetime as datetime # <module 'datetime' (built-in)>
import uuid as uuid # C:\Python27\lib\uuid.pyc
import binascii as binascii # <module 'binascii' (built-in)>
import re as re # C:\Python27\lib\re.pyc
import __builtin__ as __builtins__ # <module '__builtin__' (built-in)>
import sys as sys # <module 'sys' (built-in)>
import socket as socket # C:\Python27\lib\socket.pyc
import decimal as decimal # C:\Python27\lib\decimal.pyc
import os as os # C:\Python27\lib\os.pyc

# Variables with simple values

BINARY = 2

DATETIME = 4

DECIMAL = 5

login_timeout = 60

min_error_severity = 6

NUMBER = 3

ROW_FORMAT_DICT = 2
ROW_FORMAT_TUPLE = 1

SQLBINARY = 45
SQLBIT = 50
SQLBITN = 104
SQLCHAR = 47
SQLDATE = 40
SQLDATETIM4 = 58
SQLDATETIME = 61
SQLDATETIME2 = 42
SQLDATETIMN = 111
SQLDECIMAL = 106
SQLFLT4 = 59
SQLFLT8 = 62
SQLFLTN = 109
SQLIMAGE = 34
SQLINT1 = 48
SQLINT2 = 52
SQLINT4 = 56
SQLINT8 = 127
SQLINTN = 38
SQLMONEY = 60
SQLMONEY4 = 122
SQLMONEYN = 110
SQLNUMERIC = 108
SQLREAL = 59
SQLTEXT = 35
SQLTIME = 41
SQLUUID = 36
SQLVARBINARY = 37
SQLVARCHAR = 39

STRING = 1

wait_callback = None

__full_version__ = u'2.1.4'

__version__ = u'2.1.4'

# functions

def connect(*args, **kwargs): # real signature unknown
    pass

def get_max_connections(*args, **kwargs): # real signature unknown
    """ Get maximum simultaneous connections db-lib will open to the server. """
    pass

def quote_data(*args, **kwargs): # real signature unknown
    pass

def quote_or_flatten(*args, **kwargs): # real signature unknown
    pass

def quote_simple_value(*args, **kwargs): # real signature unknown
    pass

def remove_locale(*args, **kwargs): # real signature unknown
    pass

def set_max_connections(*args, **kwargs): # real signature unknown
    """
    Set maximum simultaneous connections db-lib will open to the server.
    
        :param limit: the connection limit
        :type limit: int
    """
    pass

def set_wait_callback(*args, **kwargs): # real signature unknown
    pass

def substitute_params(*args, **kwargs): # real signature unknown
    pass

def test_err_handler(*args, **kwargs): # real signature unknown
    """ Expose err_handler function and its side effects to facilitate testing. """
    pass

def __pyx_unpickle_MSSQLDatabaseException(*args, **kwargs): # real signature unknown
    pass

def __pyx_unpickle_MSSQLDriverException(*args, **kwargs): # real signature unknown
    pass

def __pyx_unpickle_MSSQLException(*args, **kwargs): # real signature unknown
    pass

def __pyx_unpickle_MSSQLRowIterator(*args, **kwargs): # real signature unknown
    pass

# classes

class Iterable(object):
    # no doc
    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __iter__(self, *args, **kwargs): # real signature unknown
        pass

    @classmethod
    def __subclasshook__(cls, *args, **kwargs): # real signature unknown
        pass

    __weakref__ = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """list of weak references to the object (if defined)"""


    _abc_cache = None # (!) real value is ''
    _abc_negative_cache = None # (!) real value is ''
    _abc_negative_cache_version = 0
    _abc_registry = None # (!) real value is ''
    __abstractmethods__ = None # (!) real value is ''
    __dict__ = None # (!) real value is ''
    __metaclass__ = None # (!) real value is ''


class MSSQLConnection(object):
    # no doc
    def cancel(self): # real signature unknown; restored from __doc__
        """
        cancel() -- cancel all pending results.
        
                This function cancels all pending results from the last SQL operation.
                It can be called more than once in a row. No exception is raised in
                this case.
        """
        pass

    def close(self): # real signature unknown; restored from __doc__
        """
        close() -- close connection to an MS SQL Server.
        
                This function tries to close the connection and free all memory used.
                It can be called more than once in a row. No exception is raised in
                this case.
        """
        pass

    def execute_non_query(self, query_string, params=None): # real signature unknown; restored from __doc__
        """
        execute_non_query(query_string, params=None)
        
                This method sends a query to the MS SQL Server to which this object
                instance is connected. After completion, its results (if any) are
                discarded. An exception is raised on failure. If there are any pending
                results or rows prior to executing this command, they are silently
                discarded. This method accepts Python formatting. Please see
                execute_query() for more details.
        
                This method is useful for INSERT, UPDATE, DELETE and for Data
                Definition Language commands, i.e. when you need to alter your database
                schema.
        
                After calling this method, rows_affected property contains number of
                rows affected by the last SQL command.
        """
        pass

    def execute_query(self, query_string, params=None): # real signature unknown; restored from __doc__
        """
        execute_query(query_string, params=None)
        
                This method sends a query to the MS SQL Server to which this object
                instance is connected. An exception is raised on failure. If there
                are pending results or rows prior to executing this command, they
                are silently discarded. After calling this method you may iterate
                over the connection object to get rows returned by the query.
        
                You can use Python formatting here and all values get properly
                quoted:
                    conn.execute_query('SELECT * FROM empl WHERE id=%d', 13)
                    conn.execute_query('SELECT * FROM empl WHERE id IN (%s)', ((5,6),))
                    conn.execute_query('SELECT * FROM empl WHERE name=%s', 'John Doe')
                    conn.execute_query('SELECT * FROM empl WHERE name LIKE %s', 'J%')
                    conn.execute_query('SELECT * FROM empl WHERE name=%(name)s AND                 city=%(city)s', { 'name': 'John Doe', 'city': 'Nowhere' } )
                    conn.execute_query('SELECT * FROM cust WHERE salesrep=%s                 AND id IN (%s)', ('John Doe', (1,2,3)))
                    conn.execute_query('SELECT * FROM empl WHERE id IN (%s)',                (tuple(xrange(4)),))
                    conn.execute_query('SELECT * FROM empl WHERE id IN (%s)',                (tuple([3,5,7,11]),))
        
                This method is intented to be used on queries that return results,
                i.e. SELECT. After calling this method AND reading all rows from,
                result rows_affected property contains number of rows returned by
                last command (this is how MS SQL returns it).
        """
        pass

    def execute_row(self, query_string, params=None): # real signature unknown; restored from __doc__
        """
        execute_row(query_string, params=None)
        
                This method sends a query to the MS SQL Server to which this object
                instance is connected, then returns first row of data from result.
        
                An exception is raised on failure. If there are pending results or
                rows prior to executing this command, they are silently discarded.
        
                This method accepts Python formatting. Please see execute_query()
                for details.
        
                This method is useful if you want just a single row and don't want
                or don't need to iterate, as in:
        
                conn.execute_row('SELECT * FROM employees WHERE id=%d', 13)
        
                This method works exactly the same as 'iter(conn).next()'. Remaining
                rows, if any, can still be iterated after calling this method.
        """
        pass

    def execute_scalar(self, query_string, params=None): # real signature unknown; restored from __doc__
        """
        execute_scalar(query_string, params=None)
        
                This method sends a query to the MS SQL Server to which this object
                instance is connected, then returns first column of first row from
                result. An exception is raised on failure. If there are pending
        
                results or rows prior to executing this command, they are silently
                discarded.
        
                This method accepts Python formatting. Please see execute_query()
                for details.
        
                This method is useful if you want just a single value, as in:
                    conn.execute_scalar('SELECT COUNT(*) FROM employees')
        
                This method works in the same way as 'iter(conn).next()[0]'.
                Remaining rows, if any, can still be iterated after calling this
                method.
        """
        pass

    def get_header(self): # real signature unknown; restored from __doc__
        """
        get_header() -- get the Python DB-API compliant header information.
        
                This method is infrastructure and doesn't need to be called by your
                code. It returns a list of 7-element tuples describing the current
                result header. Only name and DB-API compliant type is filled, rest
                of the data is None, as permitted by the specs.
        """
        pass

    def get_iterator(self, row_format): # real signature unknown; restored from __doc__
        """
        get_iterator(row_format) -- allows the format of the iterator to be specified
        
                While the iter(conn) call will always return a dictionary, this
                method allows the return type of the row to be specified.
        """
        pass

    def init_procedure(self, procname): # real signature unknown; restored from __doc__
        """
        init_procedure(procname) -- creates and returns a MSSQLStoredProcedure
                object.
        
                This methods initializes a stored procedure or function on the server
                and creates a MSSQLStoredProcedure object that allows parameters to
                be bound.
        """
        pass

    def mark_disconnected(self, *args, **kwargs): # real signature unknown
        pass

    def nextresult(self): # real signature unknown; restored from __doc__
        """
        nextresult() -- move to the next result, skipping all pending rows.
        
                This method fetches and discards any rows remaining from the current
                resultset, then it advances to the next (if any) resultset. Returns
                True if the next resultset is available, otherwise None.
        """
        pass

    def select_db(self, dbname): # real signature unknown; restored from __doc__
        """
        select_db(dbname) -- Select the current database.
        
                This function selects the given database. An exception is raised on
                failure.
        """
        pass

    def set_msghandler(self, handler): # real signature unknown; restored from __doc__
        """
        set_msghandler(handler) -- set the msghandler for the connection
        
                This function allows setting a msghandler for the connection to
                allow a client to gain access to the messages returned from the
                server.
        """
        pass

    def __enter__(self, *args, **kwargs): # real signature unknown
        pass

    def __exit__(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __iter__(self): # real signature unknown; restored from __doc__
        """ x.__iter__() <==> iter(x) """
        pass

    @staticmethod # known case of __new__
    def __new__(S, *more): # real signature unknown; restored from __doc__
        """ T.__new__(S, ...) -> a new object with type S, a subtype of T """
        pass

    def __reduce__(self, *args, **kwargs): # real signature unknown
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    charset = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """
        The current encoding in use.
        """

    connected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """
        True if the connection to a database is open.
        """

    debug_queries = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    identity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """
        Returns identity value of the last inserted row. If the previous
        operation did not involve inserting a row into a table with an
        identity column, None is returned.

        ** Usage **
        >>> conn.execute_non_query("INSERT INTO table (name) VALUES ('John')")
        >>> print 'Last inserted row has ID = %s' % conn.identity
        Last inserted row has ID = 178
        """

    query_timeout = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """
        A
        """

    rows_affected = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """
        Number of rows affected by last query. For SELECT statements this
        value is only meaningful after reading all rows.
        """

    tds_version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """
        Returns what TDS version the connection is using.
        """

    tds_version_tuple = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """
        Reports what TDS version the connection is using in tuple form which is
        more easily handled (parse, compare) programmatically. If no TDS
        version can be detected the value is None.
        """


    __pyx_vtable__ = None # (!) real value is ''


MssqlConnection = MSSQLConnection


class MSSQLException(Exception):
    """ Base exception class for the MSSQL driver. """
    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(S, *more): # real signature unknown; restored from __doc__
        """ T.__new__(S, ...) -> a new object with type S, a subtype of T """
        pass

    def __reduce_cython__(self, *args, **kwargs): # real signature unknown
        pass

    def __setstate_cython__(self, *args, **kwargs): # real signature unknown
        pass


class MssqlDatabaseException(MSSQLException):
    """ Raised when an error occurs within the database. """
    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(S, *more): # real signature unknown; restored from __doc__
        """ T.__new__(S, ...) -> a new object with type S, a subtype of T """
        pass

    def __reduce_cython__(self, *args, **kwargs): # real signature unknown
        pass

    def __setstate_cython__(self, *args, **kwargs): # real signature unknown
        pass

    line = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    message = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    number = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    procname = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    severity = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    srvname = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    state = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default

    text = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default



MSSQLDatabaseException = MssqlDatabaseException


class MssqlDriverException(MSSQLException):
    """
    Inherits from the base class and raised when an error is caused within
        the driver itself.
    """
    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(S, *more): # real signature unknown; restored from __doc__
        """ T.__new__(S, ...) -> a new object with type S, a subtype of T """
        pass

    def __reduce_cython__(self, *args, **kwargs): # real signature unknown
        pass

    def __setstate_cython__(self, *args, **kwargs): # real signature unknown
        pass


MSSQLDriverException = MssqlDriverException


class MSSQLRowIterator(object):
    # no doc
    def next(self): # real signature unknown; restored from __doc__
        """ x.next() -> the next value, or raise StopIteration """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    def __iter__(self): # real signature unknown; restored from __doc__
        """ x.__iter__() <==> iter(x) """
        pass

    @staticmethod # known case of __new__
    def __new__(S, *more): # real signature unknown; restored from __doc__
        """ T.__new__(S, ...) -> a new object with type S, a subtype of T """
        pass

    def __next__(self, *args, **kwargs): # real signature unknown
        pass

    def __reduce__(self, *args, **kwargs): # real signature unknown
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass


class MSSQLStoredProcedure(object):
    # no doc
    def bind(self, value, data_type, param_name=None, output=False, null=False, max_length=-1): # real signature unknown; restored from __doc__
        """
        bind(value, data_type, param_name = None, output = False,
                    null = False, max_length = -1) -- bind a parameter
        
                This method binds a parameter to the stored procedure.
        """
        pass

    def execute(self, *args, **kwargs): # real signature unknown
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(S, *more): # real signature unknown; restored from __doc__
        """ T.__new__(S, ...) -> a new object with type S, a subtype of T """
        pass

    def __reduce__(self, *args, **kwargs): # real signature unknown
        pass

    def __setstate__(self, *args, **kwargs): # real signature unknown
        pass

    connection = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The underlying MSSQLConnection object."""

    name = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The name of the procedure that this object represents."""

    parameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The parameters that have been bound to this procedure."""



# variables with complex values

string_types = (
    basestring,
)

VERSION = (
    2,
    1,
    4,
)

_re_name_param = None # (!) real value is ''

_re_pos_param = None # (!) real value is ''

__pyx_capi__ = {
    'log': None, # (!) real value is ''
}

__test__ = {}

